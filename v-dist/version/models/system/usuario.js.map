{
  "version": 3,
  "sources": [
    "usuario.js"
  ],
  "names": [
    "module",
    "exports",
    "sequelize",
    "DataType",
    "usuarios_aplos",
    "define",
    "id",
    "type",
    "BIGINT",
    "primaryKey",
    "autoIncremet",
    "nome",
    "STRING",
    "allowNull",
    "validate",
    "notEmpty",
    "nomeUsuario",
    "unique",
    "email",
    "senha",
    "imagem",
    "ativo",
    "online",
    "BOOLEAN",
    "_idEmpresa",
    "hostBanco",
    "nomeBanco",
    "usuarioBanco",
    "senhaBanco",
    "plataforma",
    "hooks",
    "beforeCreate",
    "salt",
    "genSaltSync",
    "user",
    "hashSync",
    "classMethods",
    "associate",
    "models",
    "isPassword",
    "encodedPassword",
    "password",
    "compareSync",
    "freezeTableName",
    "tableName"
  ],
  "mappings": ";;AAGA;;;;;;AAEAA,OAAOC,OAAP,GAAiB,UAACC,SAAD,EAAYC,QAAZ,EAAyB;AACtC,QAAMC,iBAAiBF,UAAUG,MAAV,CAAiB,gBAAjB,EAAmC;AACtDC,YAAK;AACDC,kBAAOJ,SAASK,MADf;AAEDC,wBAAa,IAFZ;AAGDC,0BAAe;AAHd,SADiD;AAMtDC,cAAO;AACHJ,kBAAOJ,SAASS,MADb;AAEHC,uBAAY,KAFT;AAGHC,sBAAW;AACPC,0BAAW;AADJ;AAHR,SAN+C;AAatDC,qBAAc;AACVT,kBAAOJ,SAASS,MADN;AAEVK,oBAAS,IAFC;AAGVJ,uBAAY,KAHF;AAIVC,sBAAW;AACPC,0BAAW;AADJ;AAJD,SAbwC;AAqBtDG,eAAQ;AACJX,kBAAOJ,SAASS,MADZ;AAEJC,uBAAY,KAFR;AAGJC,sBAAW;AACPC,0BAAW;AADJ;AAHP,SArB8C;AA4BtDI,eAAQ;AACJZ,kBAAOJ,SAASS,MADZ;AAEJC,uBAAY,KAFR;AAGJC,sBAAW;AACPC,0BAAW;AADJ;AAHP,SA5B8C;AAmCtDK,gBAAS;AACLb,kBAAOJ,SAASS;AADX,SAnC6C;AAsCtDS,eAAQ;AACJd,kBAAOJ,SAASS;AADZ,SAtC8C;AAyCtDU,gBAAS;AACLf,kBAAOJ,SAASoB;AADX,SAzC6C;AA4CtDC,oBAAa;AACTjB,kBAAOJ,SAASS;;AADP,SA5CyC;AAgDtDa,mBAAY;AACRlB,kBAAOJ,SAASS;;AADR,SAhD0C;AAoDtDc,mBAAY;AACRnB,kBAAOJ,SAASS;;AADR,SApD0C;AAwDtDe,sBAAe;AACXpB,kBAAOJ,SAASS;;AADL,SAxDuC;AA4DtDgB,oBAAa;AACTrB,kBAAOJ,SAASS;;AADP,SA5DyC;AAgEtDiB,oBAAa;AACTtB,kBAAMJ,SAASS,MADN;AAETC,uBAAY,KAFH;AAGTC,sBAAW;AACPC,0BAAW;AADJ;AAHF;;AAhEyC,KAAnC,EAwEpB;AACCe,eAAO;AACHC,0BAAc,4BAAQ;AAClB,oBAAMC,OAAO,mBAASC,WAAT,EAAb;AACAC,qBAAKf,KAAL,GAAa,mBAASgB,QAAT,CAAkBD,KAAKf,KAAvB,EAA8Ba,IAA9B,CAAb;AACH;AAJE,SADR;AAOCI,sBAAe;AACXC,uBAAY,mBAACC,MAAD,EAAY;AACpB;AACH,aAHU;AAIXC,wBAAY,oBAACC,eAAD,EAAkBC,QAAlB,EAA+B;AACvC,uBAAO,mBAASC,WAAT,CAAqBD,QAArB,EAA+BD,eAA/B,CAAP;AACH;AANU,SAPhB;AAeCG,yBAAiB,IAflB;AAgBC;AACAC,mBAAW;AAjBZ,KAxEoB,CAAvB;;AA4FA,WAAOxC,cAAP;AACH,CA9FD,C,CALA",
  "file": "usuario.js",
  "sourceRoot": "../../../build/models/system",
  "sourcesContent": [
    "/**\n * Modulo que faz o controle das Tasks\n */\nimport bcryptjs from 'bcryptjs';\n\nmodule.exports = (sequelize, DataType) => {\n    const usuarios_aplos = sequelize.define(\"usuarios_aplos\", {\n        id : {\n            type : DataType.BIGINT,\n            primaryKey : true,\n            autoIncremet : true\n        },\n        nome : {\n            type : DataType.STRING,\n            allowNull : false,\n            validate : {\n                notEmpty : true,\n            },\n        },\n        nomeUsuario : {\n            type : DataType.STRING,\n            unique : true,\n            allowNull : false,\n            validate : {\n                notEmpty : true,\n            },\n        },\n        email : {\n            type : DataType.STRING,\n            allowNull : false,\n            validate : {\n                notEmpty : true,\n            },\n        },\n        senha : {\n            type : DataType.STRING,\n            allowNull : false,\n            validate : {\n                notEmpty : true,\n            },\n        },\n        imagem : {\n            type : DataType.STRING,\n        },\n        ativo : {  \n            type : DataType.STRING\n        },\n        online : {\n            type : DataType.BOOLEAN\n        },\n        _idEmpresa : {\n            type : DataType.STRING,\n            \n        },\n        hostBanco : {\n            type : DataType.STRING,\n            \n        },\n        nomeBanco : {\n            type : DataType.STRING,\n            \n        },\n        usuarioBanco : {\n            type : DataType.STRING,\n            \n        },\n        senhaBanco : {\n            type : DataType.STRING,\n            \n        },\n        plataforma : {\n            type: DataType.STRING,\n            allowNull : false,\n            validate : {\n                notEmpty : true,\n            },\n        }\n\n    }, {\n        hooks: {\n            beforeCreate: user => {\n                const salt = bcryptjs.genSaltSync();\n                user.senha = bcryptjs.hashSync(user.senha, salt);\n            },\n        },\n        classMethods : {\n            associate : (models) => {\n                // Tasks.belongsTo(models.Users);\n            },\n            isPassword: (encodedPassword, password) => {\n                return bcryptjs.compareSync(password, encodedPassword);\n            }\n        },\n        freezeTableName: true,\n        // define the table's name\n        tableName: 'usuario',\n    });\n\n    return usuarios_aplos;\n}"
  ]
}
